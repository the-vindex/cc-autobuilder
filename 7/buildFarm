----------- Farm Builder
-- Program builds a farm and deploys bricks supporting soil.
-- Turtle starts at south eastern top corner of the farm - just above the farm level.

function uuid(id,meta)
   if (meta == nil ) then meta = 0 end
   return id + meta * 32768
end

-- define metatable for items - we want readable to string
local itemMeta = {__tostring = function(obj)
	if obj.name ~= nil then 
	   return name
	elseif obj.uuid ~= nil then
	   return "Unnamed item with uuid "..obj.uuid
	elseif obj.slot ~= nil then
	   return "Unnamed item with slot "..obj.slot
	end
end}

function item(slot, uuid, minAmount, restockAmount)
   local i = {slot = slot, 
			uuid = uuid, 
			minAmount = minAmount,        -- if we have this amount, then resupply
			restockAmount = restockAmount -- how many items to load when resupplying
			}
   setmetatable(i, itemMeta)
   return i
end
-- Required input:
local ITEM = {}
------------------------ Farm -----------------
ITEM.FARM_BLOCK       = item(1,  uuid(1395)  , 10, 64)--   Farm blocks
ITEM.FARM_HATCH       = item(2,  uuid(1395,3), 5 , 10)--   Farm Hatch
ITEM.FARM_GEARBOX     = item(3,  uuid(1395,2), 2 , 4 )-- Farm Gearbox
ITEM.FARM_VALVE       = item(4,  uuid(1395,4), 2 , 4 )--   Farm Valve
ITEM.STONE_BRICK      = item(5,  uuid(98,0)  , 10, 64)-- Stone Bricks
--    Circuit board           ,              , ) , 00
-----------------------  Power,  ------------, --, 00--
ITEM.ENERGY_TESSERACT = item(6,  uuid(2007)  , 0 , 1 )--   Energy Tesseract
-----------------------  Water,  ------------, --, 00--
ITEM.WATER_TESSERACT  = item(7,  uuid(2007,1), 0 , 1 )--   Liquid Tesseract
-----------------------  Items,  out --------, --, 00--
ITEM.ENDER_CHEST      = item(8,  uuid(252, 0), 1 , 5 )--  Ender Chest
-----------------------  Items,   in --------, --, 00---
ITEM.ITEM_TESSERACT_1 = item(9,  uuid(2007,2), 0 , 1 )--   Fertilizer
ITEM.ITEM_TESSERACT_2 = item(10, uuid(2007,2), 0 , 1 )--   Soil
ITEM.ITEM_TESSERACT_3 = item(11, uuid(2007,2), 0 , 1 )--   Gremlins

------------------------ Infrastructure - remote connection to home base
ITEM.FLOPPY           = item(13, uuid(4257,0)) -- floppy for sending commands
ITEM.DISK_DRIVE       = item(14, uuid(1226,0)) -- disk drive for writing to floppy
ITEM.CHEST_OUT        = item(15, nil) -- chest for items going out to home base
ITEM.CHEST_IN         = item(16, nil) -- chest for items going in
ITEM.CHARCOAL		  = item(12, uuid(263,1))
------------------------ Reserved spaces
ITEM.EMPTY            = item(12, nil)  -- may contain anything turtle digs

-- set names to items
for name, value in pairs(ITEM) do
   value.name = name
end

local FREQ = {}
FREQ.WATER = 10
FREQ.ENERGY = 1
FREQ.FERTILIZER = 2
FREQ.BOG_EARTH = 3
 
------------------------- OTHER CONSTANTS
DOWN = "down"
UP = "up"
FRONT = "front"

COMMAND_FILE = "commands"


function printApi(t)
  local count = 0
  local pagination = 1                
  for i,v in ipairs(t) do
      if pagination % 11 == 0 then
         read()
      end 
      print(i)
      count = count + 1
      pagination = pagination + 1 
  end
  if count == 0 then 
    for i,v in pairs(t) do
      if pagination % 11 == 0 then
         read()
      end  
      print(i)
      pagination = pagination + 1 
    end
  end
end

function printTable(t)
  local pagination = 1
  for i,v in pairs(t) do
    if pagination % 11 == 0 then
       read()
    end  
    print(i)
    pagination = pagination + 1 
  end
end


function itemName(item)
   return item.name
end
----- START of function call recorder
function s(value)
   if value == nil then
     return ""
   else
     return value
   end
end

local mode = "replay"
local log = {}

function addLog(functionName, func, parameters)
   local logItem = {functionName = functionName, func = func, parameters = parameters}
   log[#log+1] = logItem   
end

function wrap(name, f)
  print("Wrapping "..name)
  local _f = f
  local _name = name
  return function(self,a1,a2,a3,a4,a5)
     --print("Call to ".._name.."("..s(a1)..","..s(a2)..","..s(a3)..","..s(a4)..","..s(a5)..")")
     if mode == "record" or mode=="plan" then
        addLog(_name,_f,{a1,a2,a3,a4,a5})
     end
     
     if mode ~= "plan" then
        _f(self, a1,a2,a3,a4,a5)
     end
  end
end

function wrapAll(t)
   for name,originalFunction in pairs(t:listMethods()) do
      local proxy = wrap(name, originalFunction)
      t[name] = proxy
   end
end

function play(object)
   for i, item in ipairs(log) do
      local a1, a2, a3, a4, a5 = item.parameters[1], item.parameters[2], item.parameters[3], item.parameters[4], item.parameters[5]
      object[item.functionName](object,a1,a2,a3,a4,a5)
   end
end
------------------ END of recorder

------------------ FarmBuilder Start
FarmBuilder = {}

function FarmBuilder:new(o)
   o = o or {}
   setmetatable(o, self)
   self.__index = self
   return o
end

function FarmBuilder:listMethods()
   local methods = {}
   for name,originalFunction in pairs(self) do
      methods[name] = originalFunction
   end
   
   for name,originalFunction in pairs(getmetatable(self)) do
      methods[name] = originalFunction
   end
   
   --forbidden symbols
   methods["__index"] = nil
   methods["new"] = nil
   methods["listMethods"] = nil
   
   return methods
end

function FarmBuilder:moveForward()
   return self:_cycle(function() turtle.forward() end)
end

function FarmBuilder:moveBack()
   return self:_cycle(function() turtle.back() end)
end

function FarmBuilder:moveUp()
   return self:_cycle(function() turtle.up() end)
end

function FarmBuilder:moveDown()
   return self:_cycle(function() turtle.down() end)
end

function FarmBuilder:_cycle(f, limit)
   if limit ~= nil then
      limit = 10
   end
   
   local count = limit
   repeat
     sleep(1)
     count = count - 1
   until f() or count == 0
   
   return count > 0 -- if count >0, then we were successful
end

function FarmBuilder:dig(item)
   self:_doWithItem(item, turtle.dig, true)
end

function FarmBuilder:digUp(item)
   self:_doWithItem(item, turtle.digUp, true)
end

function FarmBuilder:digDown(item)
   self:_doWithItem(item, turtle.digDown, true)
end

function FarmBuilder:suck(item)
   self:_doWithItem(item, turtle.suck, true)
end

function FarmBuilder:suckUp(item)
   self:_doWithItem(item, turtle.suckUp, true)
end

function FarmBuilder:suckDown(item)
   self:_doWithItem(item, turtle.suckDown, true)
end

function FarmBuilder:discardDig(digDirection)
   self:_chooseSlotByItem(ITEM.EMPTY)
   turtle.drop()
   
   if digDirection == DOWN then
      turtle.digDown()
   elseif digDirection == UP then
      turtle.digUp()
   elseif digDirection == FRONT then
      turtle.dig()
   else
      error("Unknown dig direction: "..digDirection)
   end
   
   turtle.drop()
end

function FarmBuilder:place(item)
   self:_doWithItem(item, turtle.place)
end

function FarmBuilder:placeUp(item)
   self:_doWithItem(item, turtle.placeUp)
end

function FarmBuilder:placeDown(item)
   self:_doWithItem(item, turtle.placeDown)
end

function FarmBuilder:dropDown(item)
   self:_doWithItem(item, turtle.dropDown)
end

function FarmBuilder:_doWithItem(item, funcToDo, doNotFail)
   self:_chooseSlotByItem(item)
   
   if not funcToDo() and doNotFail ~= true then
      error("Operation with "..item.." failed")
   end
end

function FarmBuilder:_chooseSlotByItem(item)
   turtle.select(item.slot)
end

function FarmBuilder:_sendCommands(commands)
   -- for start let's assume turtle build from up down - so there is always space below
   self:discardDig(DOWN)
   self:placeDown(ITEM.DISK_DRIVE)
   self:dropDown(ITEM.FLOPPY)
   
   local d = peripheral.wrap("bottom")
   local file = fs.open(fs.combine("disk", COMMAND_FILE), "w")
   file.write(commands)
   file.close()
   
   self:suckDown(ITEM.FLOPPY)
   self:digDown(ITEM.DISK_DRIVE)
   
   self:placeDown(ITEM.CHEST_OUT)
   self:dropDown(ITEM.FLOPPY)
   self:digDown(ITEM.CHEST_OUT)                                         
end

function FarmBuilder:_extractFromSorter(item)
   local sorter = peripheral.wrap("down")
   sorter.extract(0,item.uuid,1,1)
   _chooseSlotByItem(ITEM.EMPTY.slot)
   turtle.transferTo(item.slot)
end

function FarmBuilder:_requestItems(requestTable)
   local command = ""
   for k, v in pairs(requestTable) do
      command = command..itemName(k).."\n"..v.."\n"
   end
   
   return self:_sendCommands(command)
end

function FarmBuilder:takeFromChest(item, count)
    if (count == nil) then
	   count = 64
	end
	local chest = peripheral.wrap("bottom")
	for slotNumber = 0, 26 do
	   local slotContents = chest.getStackInSlot(slotNumber)
	   if slotContents ~= nil and item.uuid == uuid(slotContents.id, slotContents.dmg) then
	      chest.pushIntoSlot("up", slotNumber, count, item.slot-1) -- openperipherals count slots from 0
		  return true
	   end
	end
	return false
end

-- resupplies by sending a floppy disk to other turtle
function remoteResupply()
	local req = {}
	req[ITEM.STONE_BRICK] = 20
	req[ITEM.FARM_BLOCK] = 30
	self:_requestItems(req)

	self:placeDown(ITEM.CHEST_IN)
	while true do
	   local gotFloppy = self:takeFromChest(ITEM.FLOPPY)
	   if gotFloppy then
		  for item, count in pairs(req) do
			 self:takeFromChest(item,count)		 
		  end
		  break
	   end
	   sleep(1)
	end
	self:digDown(ITEM.CHEST_IN)
end

function FarmBuilder:buildFarm()
   -- Building 5x5x4 farm   
   local hatchesNeeded = 4
   local valvesNeeded = 1
   local gearBoxesNeeded = 1
   local farmBlocksNeeded = 5 * 5 * 4 - hatchesNeeded - valvesNeeded - gearBoxesNeeded
end


------------------ FarmBuilder END

------------------ Compass START
Compass = {SOUTH = 0, WEST = 1, NORTH = 2, EAST = 3}
Compass.directions = {[0] = "SOUTH", [1] = "WEST", [2] = "NORTH", [3] = "EAST"}

function Compass:new(direction)
   local o = {}
   setmetatable(o, self)
   self.__index = self
   
   if direction < 0 or direction > 3 then
      error("Invalid direction value: "..direction)
   end
   o.direction = direction
   return o
end

function Compass:turnRight()
   
end

function Compass:turnLeft()
end

function Compass:setCurrentDirection()
end

function Compass:getCurrentDirection()
end

------------------ Compass END

local farmBuilder = FarmBuilder:new()

function FarmBuilder:_resupply()
	self:placeDown(ITEM.CHEST_IN)
	for name, item in pairs(ITEM) do
	   print("Considering "..name)
	   if item.minAmount ~= nil then
	      local weHave = turtle.getItemCount(item.slot)
		  local weShouldHave = item.restockAmount
		  while(weHave < weShouldHave) do		     
		     self:takeFromChest(item,weShouldHave-weHave)
			 weHave = turtle.getItemCount(item.slot)
			 sleep(0.3)
		  end
	   end
	end
	self:digDown(ITEM.CHEST_IN)
end

farmBuilder:_resupply()